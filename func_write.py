# Autogenerated with SMOP version 
# main.py func_indicator_11_FUTURE_SCENARIOS.m
import numpy as np
from netcdf_funcs import *
import time


def func_write (filename, x, y, time_list,RP, metadata_global,metadata_var,inun_index,out_list):
    time1 = time.time()
    # make a new variable to store this data
    print 'filename,RP'
    print filename,time_list
    prepare_nc(filename, x, y, time_list,RP, metadata_global)
    append_nc(filename, 'Risk_Results', fill_value=-9999, metadata=metadata_var) #here need to be depending on the indicator 3, 11 or 8
    # now store the data in this variable in the first time instance
    a = nc.Dataset(filename, 'a')
    print('Writing variable to {:s}'.format(filename))
    var = a.variables['Risk_Results']
    var.set_auto_maskandscale(False)
    #print i_RP, np.nansum(out_list), inun_index
    var_written = 'NA Array'
    print(out_list.shape)
    print (inun_index)
    new_array=np.zeros(var.shape)
    #new_array[new_array==0]=-9999
    print(len(inun_index[0]))
    if (len(inun_index[0])>0):
        new_array[inun_index[0][:],inun_index[1][:]]=out_list
    #we invert the result in order to save then into the variable var which has lon lat from -180,180 and -90,90
    #new_array=new_array[::-1] #more efficient function np.flipud
    new_array=np.flipud(new_array[:,:])
    if (np.nansum(out_list)>0):
        #var[0, inun_index[0], inun_index[1]] = out_list
        print('prob var')
        var[:,:] = new_array[:,:]
        #var[inun_index[0]][inun_index[1]] = out_list  debbug of netCF4
        time2 = time.time()
        print('Took {:f} seconds to write sonme_Data to {:s}'.format(time2 - time1, filename))
        a.sync()
        a.close()
        var_written = 'Raster with risk assessment results'
    return (var_written);
